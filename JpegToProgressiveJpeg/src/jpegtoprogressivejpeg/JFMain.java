/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jpegtoprogressivejpeg;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.iharder.dnd.FileDrop;

/**
 *
 * @author Sely
 */
public class JFMain extends javax.swing.JFrame {

    /**
     * Creates new form JFMain
     */
    File fileBaseJPEG;
    File folderProgressiveJPEG;
    File[] inputFiles;

    public JFMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBConvert = new javax.swing.JButton();
        jTFBaseJPEG = new javax.swing.JTextField();
        jTFProgressiveJPEG = new javax.swing.JTextField();
        jBBrowseBaseJPEG = new javax.swing.JButton();
        jCBConvertOnDRagAndDrop = new javax.swing.JCheckBox();
        jBBrowseEXEFolder = new javax.swing.JButton();
        jSPLists = new javax.swing.JScrollPane();
        jLDropedFiles = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JPEG To Progressive JPEG");

        jBConvert.setText("Convert");
        jBConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConvertActionPerformed(evt);
            }
        });

        jTFProgressiveJPEG.setDragEnabled(true);
        jTFProgressiveJPEG.setDropMode(javax.swing.DropMode.INSERT);
        jTFProgressiveJPEG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTFProgressiveJPEGMouseReleased(evt);
            }
        });

        jBBrowseBaseJPEG.setText("Browse JPEG File");
        jBBrowseBaseJPEG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseBaseJPEGActionPerformed(evt);
            }
        });

        jCBConvertOnDRagAndDrop.setText("Convert on Drag and Drop");

        jBBrowseEXEFolder.setText("Browse Output Folder");
        jBBrowseEXEFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseEXEFolderActionPerformed(evt);
            }
        });

        jSPLists.setViewportView(jLDropedFiles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTFProgressiveJPEG, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jBBrowseBaseJPEG, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTFBaseJPEG, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                                .addComponent(jCBConvertOnDRagAndDrop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jBBrowseEXEFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBConvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jSPLists, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFProgressiveJPEG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBrowseBaseJPEG, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBrowseEXEFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFBaseJPEG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBConvertOnDRagAndDrop)
                    .addComponent(jBConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSPLists, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public File getFileBaseJPEG() {
        return fileBaseJPEG;
    }

    public void setFileBaseJPEG(File fileBaseJPEG) {
        this.fileBaseJPEG = fileBaseJPEG;
    }

    public File getFolderEXE() {
        return folderProgressiveJPEG;
    }

    public void setFolderEXE(File folderEXE) {
        this.folderProgressiveJPEG = folderEXE;
    }

    public File[] getInputFiles() {
        return inputFiles;
    }

    public void setInputFiles(File[] inputFiles) {
        this.inputFiles = inputFiles;
    }

    public void convertBaseJPEGToProgressiveJPEG(int from) {
        if (!jTFProgressiveJPEG.getText().trim().equals("") && !jTFBaseJPEG.getText().trim().equals("")) {
            Runtime rt = Runtime.getRuntime();
            Process pr = null;
             
            if (from == 0) {
                if (fileBaseJPEG.getName().toLowerCase().endsWith(".jpg")||fileBaseJPEG.getName().toLowerCase().endsWith(".jpeg")) {
                    try {
                        
                        //String command = "convert -strip -interlace Plane \""+fileBaseJPEG.getAbsolutePath()+"\" \""+folderProgressiveJPEG.getAbsolutePath() + "\\Progressive_JPEG_" + fileBaseJPEG.getName()+"\"";                        
                        String command = System.getProperty("user.dir")+"\\convert.bat \""+fileBaseJPEG.getAbsolutePath()+"\" \""+folderProgressiveJPEG.getAbsolutePath() + "\\Progressive_JPEG_" + fileBaseJPEG.getName()+"\"";                        
                        pr = rt.exec(command);                        
                        System.out.println(command);
                    } catch (IOException e) {
                        System.out.println(pr.getErrorStream());
                    }
                } else {
                    JOptionPane.showConfirmDialog(this, fileBaseJPEG.getAbsoluteFile() + " is not a valid JPEG file !", "JPEG to Progressive JPEG", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (from == 1) {


                for (File file : inputFiles) {
                    if (file.getName().toLowerCase().endsWith(".jpg")||file.getName().toLowerCase().endsWith(".jpeg")) {
                        try {                            
                            String command = "convert -strip -interlace Plane \""+fileBaseJPEG.getAbsolutePath()+"\" \""+folderProgressiveJPEG.getAbsolutePath() + "\\Progressive_JPEG_" + fileBaseJPEG.getName()+"\"";                        
                            pr = rt.exec(command);
                            System.out.println(command);
                        } catch (IOException e) {
                        }
                    } else {
                        JOptionPane.showConfirmDialog(this, file.getAbsoluteFile() + " is not a valid JPEG file !", "JPEG to Progressive JPEG", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    }

                }
            }
        } else {
            JOptionPane.showConfirmDialog(this, "Please Enter required Datas !", "JPEG to Progressive JPEG", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void jBConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConvertActionPerformed
        convertBaseJPEGToProgressiveJPEG(0);
    }//GEN-LAST:event_jBConvertActionPerformed

    private void jBBrowseBaseJPEGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseBaseJPEGActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jBBrowseBaseJPEG) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                fileBaseJPEG = jfc.getSelectedFile();
                jTFProgressiveJPEG.setText(fileBaseJPEG.getAbsolutePath());
                folderProgressiveJPEG = jfc.getCurrentDirectory();
                jTFBaseJPEG.setText(folderProgressiveJPEG.getAbsolutePath());

                DefaultListModel listModel = new DefaultListModel();
                jLDropedFiles.setModel(listModel);

            } else {
                fileBaseJPEG = null;
            }
        }
    }//GEN-LAST:event_jBBrowseBaseJPEGActionPerformed

    private void jBBrowseEXEFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseEXEFolderActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jBBrowseEXEFolder) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                folderProgressiveJPEG = jfc.getSelectedFile();

                jTFBaseJPEG.setText(folderProgressiveJPEG.getAbsolutePath());

            } else {
                folderProgressiveJPEG = null;
            }
        }
    }//GEN-LAST:event_jBBrowseEXEFolderActionPerformed

    private void jTFProgressiveJPEGMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFProgressiveJPEGMouseReleased
        // TODO add your handling code here:
        if (evt.getSource() == jTFProgressiveJPEG) {
        }
    }//GEN-LAST:event_jTFProgressiveJPEGMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                final JFMain jf = new JFMain();
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                jf.setLocation(dim.width / 2 - jf.getSize().width / 2, dim.height / 2 - jf.getSize().height / 2);
                jf.setVisible(true);

                new FileDrop(jf.jTFProgressiveJPEG, new FileDrop.Listener() {
                    public void filesDropped(java.io.File[] files) {
                        DefaultListModel listModel = new DefaultListModel();
                        for (File file : files) {
                            listModel.addElement(file.getAbsoluteFile());
                            System.out.println(file.getAbsoluteFile());
                        }
                        jf.jLDropedFiles.setModel(listModel);

                        if (files != null) {
                            jf.setFileBaseJPEG(files[0]);
                            jf.jTFProgressiveJPEG.setText(files[0].getAbsolutePath());
                            jf.setFolderEXE(new File(files[0].getParent()));
                            jf.jTFBaseJPEG.setText(files[0].getParent());

                        }
                        jf.setInputFiles(files);

                        if (jf.jCBConvertOnDRagAndDrop.isSelected()) {
                            jf.convertBaseJPEGToProgressiveJPEG(1);
                        }

                    }   // end filesDropped
                }); // end FileDrop.Listener

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBrowseBaseJPEG;
    private javax.swing.JButton jBBrowseEXEFolder;
    private javax.swing.JButton jBConvert;
    private javax.swing.JCheckBox jCBConvertOnDRagAndDrop;
    private javax.swing.JList jLDropedFiles;
    private javax.swing.JScrollPane jSPLists;
    private javax.swing.JTextField jTFBaseJPEG;
    private javax.swing.JTextField jTFProgressiveJPEG;
    // End of variables declaration//GEN-END:variables
}
